#!/usr/bin/env ruby

$LOAD_PATH << File.expand_path(File.dirname(__FILE__))
$LOAD_PATH << File.join(File.expand_path(File.dirname(__FILE__)), "lib")

gem "activesupport"
gem "railsgame"
require "juggernaut_connect.rb"
require "player_action.rb"

# Example game file
require "goblin_player.rb"

JuggernautConnect.connect
if JuggernautConnect.connected?
  print "GameServer: Connected!\n"
else
  print "GameServer: Not Connected!\n"
end

module GameServer
  # How often to check for input
  @@last_interval = Time.now
  PollInterval = 1.second

  def self.sleep_until_next_poll
    # Sleep until PollInterval after the most recent polling
    next_interval = @@last_interval + PollInterval
    now = Time.now

    time_slept = 0
    time_slept = next_interval - now if next_interval > now

    @@last_interval = next_interval
    sleep time_slept if time_slept > 0
  end

  def self.process_player_action(rbody)
    if rbody.kind_of? String
      begin
        rh = ActiveSupport::JSON.decode(rbody)
        raise "Invalid JSON hash from JuggernautConn!" unless rh['type']
        if rh['type'] == 'action'
          print "GameServer: Got action #{rh['verb']} from #{rh['client']}.\n"
          RailsGame::PlayerAction::received(rh['client'], rh['verb'], rh['objects'])
        else
          print "GameServer: Can't yet process non-action JSON hashes!\n"
        end
      rescue ActiveSupport::JSON::ParseError
        print "GameServer: Received non-JSON string [#{rbody}].  Not for us?\n"
      end
    else
      raise "GameServer: Invalid object received from JuggernautConn!"
    end
  end

  # The main loop
  while(JuggernautConnect.connected?) do
    responses = JuggernautConnect.poll
    responses.each do |r|
      #print "GameServer sending...\n"
      #JuggernautConnect.send_to_all('alert("hi!");');
      raise "Invalid object received from JuggernautConn!" unless r.kind_of? Hash

      rb = r['body']
      begin
        self.process_player_action(rb)
      rescue => e
        print e.inspect
        print e.backtrace
      end
    end

    # TODO: all that interesting game stuff not triggered by players

    self.sleep_until_next_poll
  end
end

print "GameServer: exited\n"
